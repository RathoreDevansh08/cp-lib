int prim() {
	int minCost = 0;
	vector <bool> S (V, false);
	vector <int> Key (V);
	vector <int> Par (V, -1);
	priority_queue <pii , vector <pii> , greater <pii> > Q;

	for (int v = 0; v < V; ++v) {
		if (v) {
			Q.push({inf, v}), Key[v] = inf;
		}
		else Q.push ({0, v}), Key[v] = 0;
	}

	while (!Q.empty()) {
		pii up = Q.top();
		Q.pop();
		int u = up.second;
		if (S[u] == true) continue;

        minCost += up.first;
		S[u] = true;

		for (auto vertexPair : Adj[u]) { //TODO : Make it convenient to use
			int v = vertexPair.second;
			int w = vertexPair.first;
			if (S[v] == false && Key[v] > w) {
				Key[v] = w;
				Q.push({Key[v], v});
				Par[v] = u;
			}
		}
	}
	return minCost;
}
