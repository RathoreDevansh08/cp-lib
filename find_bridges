int tmr;
int f[N], t[N];
int vis[N] = {0};
set < pair <int, int> > bridges;

void markBridge(int u, int v) {
	bridges.insert({u, v});
	bridges.insert({v, u});
}

void dfsF (int u, int pr) {
	vis[u] = 1;
	t[u] = f[u] = tmr++;

	for (auto vPair : Adj[u]) {
		int v = vPair.x;
		if (v == pr) continue;
		if (vis[v])
			f[u] = min (f[u], t[v]);
		else {
			dfsF (v, u);
			f[u] = min (f[u], f[v]);
			if (f[v] > t[u])
				markBridge(u, v);
		}
	}
}

void find_bridges() {
	tmr = 0;
	for (int u = 0; u < V; ++u) {
		vis[u] = 0, t[u] = f[u] = -1;
	}
	bridges.clear();

	for (int u = 0; u < V; ++u) { // else run for every connected component
		if (!vis[u]) {
			dfsF (u, -1);
		}
	}
}
