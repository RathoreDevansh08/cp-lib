int vis[N], idx[N], cn;
vector <int> order;
vector < vector <int> > CComp;
vector < vector <pii> > AdjT;
vector < set <int> > AdjCC;

void dfsTimer (int u) {
	vis[u] = 1;

	for (auto vPair : Adj[u]) {
		int v = vPair.x;
		if (!vis[v]) dfsTimer (v);
	}
	order.push_back(u);
}

void dfsCC(int u) {
	vis[u] = 1;
	CComp[cn].push_back(u);

	for (auto vPair : AdjT[u]) {
		int v = vPair.x;
		if (!vis[v]) dfsCC(v);
	}
}

void ccomp_dir() {
	cn = 0;
	for (int i = 0; i < N; ++i)
		vis[i] = 0, idx[i] = -1;
	AdjT.assign(V, vector <pii> ());
	order.clear();
	CComp.clear();

	for (int u = 0; u < V; ++u)
		if (!vis[u]) dfsTimer(u);

	for (int u = 0; u < V; ++u) {
		for (auto vPair : Adj[u]) {
			int v = vPair.x;
			long long w = vPair.y;
			AdjT[v].push_back(pii(u, w));
		}
	}

	fill (vis, vis + N, 0);
	reverse (order.begin(), order.end());

	for (auto u : order) {
		if (!vis[u]) {
			CComp.push_back(vector <int> ());
			dfsCC (u);
			++cn;
		}
	}
}

void gen_Condensed() {
	AdjCC.assign(cn, set <int>()); // the condensed graph (DAG)
	for (int u = 0; u < V; ++u) {
		for (auto vPair : Adj[u]) {
			int v = vPair.x;
			if (idx[u] == idx[v]) continue;
			AdjCC[idx[u]].insert(idx[v]);
		}
	}
}
